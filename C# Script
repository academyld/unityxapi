using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;
using TinCan;
using TinCan.LRSResponses;

public class statements : MonoBehaviour
{
    public string actorXName;
    public string verbXName;
    public string Xdescription;
    public int Xvalue;

    // Start is called before the first frame update
    void Start()
    {
        SendStatement(actorXName, verbXName, Xdescription, Xvalue);
    }

    // Update is called once per frame
    void Update()
    {
        
    }

    public void SendStatement(string actorName, string verbName, string description, int value)
    {
        Debug.Log("Prepping statement");
        var lrs = new RemoteLRS(
        "lrs url",
        "key",
        "secret"
        );

        //Build out Actor details
        var actor = new Agent();
        actor.mbox = "mailto:" + actorName.Replace(" ", "") + "@noemail.com";
        actor.name = actorName;

        //Build out Verb details
        var verb = new Verb();
        verb.id = new Uri("http://www.example.com/" + verbName.Replace(" ", ""));
        verb.display = new LanguageMap();
        verb.display.Add("en-US", verbName);

        //Build out Activity details
        var activity = new Activity();
        activity.id = new Uri("http://www.example.com/" + description.Replace(" ", "")).ToString();

        //Build out Activity Definition details
        var activityDefinition = new ActivityDefinition();
        activityDefinition.description = new LanguageMap();
        activityDefinition.name = new LanguageMap();
        //activityDefinition.description.Add("en-US", resp);
        activityDefinition.name.Add("en-US", (description));
        activity.definition = activityDefinition;

        //Add Module info into "Statment.Context.Platform"
        //var context = new Context();
        //context.platform = module;

        var result = new Result();
        var score = new Score();

        score.raw = value;
        result.score = score;
        //result.response = resp;

        //Build out full Statement details
        var statement = new Statement();
        statement.actor = actor;
        statement.verb = verb;
        statement.target = activity;
        statement.result = result;
        //statement.context = context;

        //Send the statement
        StatementLRSResponse lrsResponse = lrs.SaveStatement(statement);
        if (lrsResponse.success) //Success
        {
            Debug.Log("Save statement: " + lrsResponse.content.id);
        }
        else //Failure
        {
            Debug.Log("Statement Failed: " + lrsResponse.errMsg);
        }


    }

}
